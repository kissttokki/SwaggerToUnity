{% template Client.Class.Annotations %}
using System;
using UnityEngine;
using UnityEngine.Networking;
using System.Text;
using Newtonsoft.Json;
using System.Collections.Generic;

{{ ClientClassAccessModifier }} partial class {{ Class }}{% if GenerateClientInterfaces %} : I{{ Class }}{% endif %}
{
    {% for operation in Operations %}
    /// <summary>
    /// {{ operation.Documentation }}
    /// </summary>
    public static async {% if operation.ResultType == "System.Threading.Tasks.Task" %}UniTask{% else %}UniTask<{{ operation.UnwrappedResultType }}>{% endif %} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(NetworkConfig.BaseUrl);
        urlBuilder_.Append("{{ operation.Path }}");
        {% if operation.HasContent %}
        var bodyJson = JsonConvert.SerializeObject({{ operation.ContentParameter.VariableName }});
        byte[] bodyRaw = Encoding.UTF8.GetBytes(bodyJson);
        {% endif %}
        {% if operation.QueryParameters.size > 0 %}
        var queryParams = new List<string>();
        {% for parameter in operation.QueryParameters %}
        queryParams.Add($"{{ parameter.Name }}={Uri.EscapeDataString(Convert.ToString({{ parameter.VariableName }}))}");
        {% endfor %}
        if (queryParams.Count > 0)
        {
            urlBuilder_.Append("?");
            urlBuilder_.Append(string.Join("&", queryParams));
        }
        {% endif %}
        var url = urlBuilder_.ToString();
        var request = new UnityWebRequest(url, "{{ operation.HttpMethodUpper }}");
        {% if operation.HasContent %}
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        {% endif %}
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");
        {% for header in operation.HeaderParameters %}
        request.SetRequestHeader("{{ header.Name }}", {{ header.VariableName }});
        {% endfor %}
        
        #if NET_LOG
        Debug.Log($"[{{ Class }}/REQ] {url}");
        #endif

        await request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            var responseText = request.downloadHandler.text;

            #if NET_LOG
            Debug.Log($"[{{ Class }}/RES] {responseText}");
            #endif

            {% if operation.HasResultType %}
            var result = JsonConvert.DeserializeObject<{{ operation.UnwrappedResultType }}>(responseText);
            return result;
            {% else %}
            return;
            {% endif %}
        }
        else
        {
            #if NET_LOG
            Debug.LogError($"[{{ Class }}] Request failed: {request.error}");
            #endif
            throw new System.Exception($"[{{ Class }}] Request failed: {request.error}");
        }
    }
    {% endfor %}
}