using Cysharp.Threading.Tasks;
using System;
using System.IO;
using System.IO.Compression;
using System.Text;
using System.Threading;

namespace {{ namespace }}
{
    public static class NetworkConfig
    {
        public static string BaseUrl {get;set;} = "{{ baseUrl }}";
        public static int TimeoutSeconds {get;set;} = {{ timeout }};
        public static CancellationToken? Token { get; set; }
        public static string JwtToken {get;set;} = null;

        // 타입별로 정적 배열을 유지하는 Copy-On-Write 이벤트 허브
        private static class PacketEvent<T>
        {
            private static readonly object _sync = new object();
            private static Action<T>[] _handlers = Array.Empty<Action<T>>();

            public static void Add(Action<T> callback)
            {
                if (callback == null) throw new ArgumentNullException(nameof(callback));
                lock (_sync)
                {
                    var src = _handlers;
                    var dst = new Action<T>[src.Length + 1];
                    Array.Copy(src, dst, src.Length);
                    dst[src.Length] = callback;
                    _handlers = dst;
                }
            }

            public static void Invoke(T packet)
            {
                var snapshot = _handlers;
                for (int i = 0; i < snapshot.Length; i++)
                {
                    try
                    {
                        snapshot[i]?.Invoke(packet);
                    }
                    catch
                    {
                        // 개별 핸들러 예외
                    }
                }
            }
        }

        public static void RegPacketEvent<T>(Action<T> callback)
        {
            PacketEvent<T>.Add(callback);
        }

        public static void InvokePacketEvent<T>(T packet)
        {
            PacketEvent<T>.Invoke(packet);
        }

        // 기존 시그니처 유지: default(T)로 호출
        public static void InvokePacketEvent<T>()
        {
            PacketEvent<T>.Invoke(default(T));
        }
    }
}
